server:
  port: 8080
spring:
  application:
    name: gateway-server

  # connect to discovery service to locate service information and create automatic routing which can be seen on
  # http://localhost:8080/actuator/gateway/routes. We are not using this and instead create our custom routing
  cloud:
    gateway:
      discovery:
        locator:
          enabled: false
          lowerCaseServiceId: true
      httpclient:
        connect-timeout: 1000
        response-timeout: 10s

      default-filters:
        - SaveSession #instruct Spring Cloud Gateway to always save the web session before forwarding requests downstream.
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - AddResponseHeader=Access-Control-Allow-Origin, *

      routes:
        - id: profiles-conversation
          uri: lb://profiles-conversation
          predicates:
            - Path=/profiles/**, /conversation/**
          filters:
            - TokenRelay
        - id: frontend
          uri: http://${FRONTEND_IP}:5173/
          predicates:
            - Path=/**

  # connect to redis
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s

  # Use redis for session management
  session:
    redis:
      namespace: api-persona-gateway
      repository-type: default
    timeout: 10m

  #OAuth2 Client setup
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: ai-persona-hub-auth-code-grant
            client-secret: TlLtZyrPPmoLIGcXEjfbyBd1gQDDYd3o
            scope: openid,email,profile,roles
#            redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"
        provider:
          keycloak:
            issuer-uri: "http://localhost:7080/realms/ai-persona-hub"

#frontEnd
front_end:
  url: http://localhost:5173

#Actuator with readiness and liveness
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true
    gateway:
      enabled: true

logging:
  level:
    org:
      springframework:
        security: DEBUG

#For service discovery
eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/